# encoding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :

VM_BOX = "debian/bookworm64"
VM_BOX_VERSION = "12.20231009.1"

KUBESPRAY_TAG = "v2.23.1"

CONTROLLER_CPU = 1
CONTROLLER_RAM = 1024

MASTER_CPU = 2
MASTER_RAM = 2048

WORKER_CPU = 4
WORKER_RAM = 4096

CONTROLLER_IP = "192.168.56.10"

MASTER_IP_ARRAY = [
    "192.168.56.11", 
    "192.168.56.12"
]

WORKER_IP_ARRAY = [
    "192.168.56.13", 
    "192.168.56.14"
]

Vagrant.configure(2) do |config|
    # disable ssh keys change on boot
    config.ssh.insert_key = false
    
    # k8s master deploy loop
    $master_count = MASTER_IP_ARRAY.length()
    (1..$master_count).each do |i|
      config.vm.define "k8s-master-#{i}" do |master|
        master.vm.box = VM_BOX
        master.vm.box_version = VM_BOX_VERSION
        master.vm.provider "virtualbox" do |v|
          v.name = "k8s master #{i}"
          v.memory = MASTER_RAM
          v.cpus = MASTER_CPU
        end
        master.vm.hostname = "master#{i}"
        master.vm.network "private_network", ip: MASTER_IP_ARRAY[i - 1]
        master.vm.provision "shell", run: 'once', inline: <<-SHELL
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
        SHELL
        master.trigger.after :up do
          master.vm.provision "shell", run: 'always', inline: <<-SHELL
            swapoff -a
            uptime
          SHELL
        end
      end
    end

    # k8s worker deploy loop
    $worker_count = WORKER_IP_ARRAY.length()
    (1..$worker_count).each do |i|
      config.vm.define "k8s-worker-#{i}" do |worker|
        worker.vm.box = VM_BOX
        worker.vm.box_version = VM_BOX_VERSION
        worker.vm.provider "virtualbox" do |v|
          v.name = "k8s worker #{i}"
          v.memory = WORKER_RAM
          v.cpus = WORKER_CPU
        end
        worker.vm.hostname = "worker#{i}"
        worker.vm.network "private_network", ip: WORKER_IP_ARRAY[i - 1]
        worker.vm.provision "shell", run: 'once', inline: <<-SHELL
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
        SHELL
        worker.trigger.after :up do
          worker.vm.provision "shell", run: 'always', inline: <<-SHELL
            swapoff -a
            uptime
          SHELL
        end
      end
    end

    # ansible controller node deploy
    config.vm.define "controller" do |controller|
      controller.vm.box = VM_BOX
      controller.vm.box_version = VM_BOX_VERSION
      controller.vm.hostname = "controller"
      controller.vm.provider "virtualbox" do |v|
        v.name = "controller"
        v.memory = CONTROLLER_RAM
        v.cpus = CONTROLLER_CPU
      end
      controller.vm.network "private_network", ip: CONTROLLER_IP
      controller.vm.synced_folder "./vagrant_ssh_keys", "/shared"
      controller.vm.provision "shell", run: 'once', inline: <<-SHELL
        cp /shared/id_rsa /root/.ssh/id_rsa
        cp /shared/id_rsa.pub /root/.ssh/id_rsa.pub
        sudo chmod 600 /root/.ssh/id_rsa
        sudo apt-get update
        sudo apt-get install python3 python3-pip python3-venv git -y
        python3 -m venv env
        source env/bin/activate
        git clone https://github.com/kubernetes-sigs/kubespray
        cd kubespray
        git checkout tags/#{KUBESPRAY_TAG}
        pip install -r requirements.txt
        cp -rfp inventory/sample inventory/k8s
        declare -a IPS=(#{MASTER_IP_ARRAY[0]} #{MASTER_IP_ARRAY[1]} #{WORKER_IP_ARRAY[0]} #{WORKER_IP_ARRAY[1]})
        CONFIG_FILE=inventory/k8s/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}
        sed -i "s/helm_enabled: false/helm_enabled: true/g" ./inventory/k8s/group_vars/k8s_cluster/addons.yml
        sed -i "s/ingress_nginx_enabled: false/ingress_nginx_enabled: true/g" ./inventory/k8s/group_vars/k8s_cluster/addons.yml
        sed -i "s/# ingress_nginx_host_network: false/ingress_nginx_host_network: true/g" ./inventory/k8s/group_vars/k8s_cluster/addons.yml
        cat inventory/k8s/hosts.yaml
        ansible-playbook -i inventory/k8s/hosts.yaml -u vagrant --become --become-user=root cluster.yml
        deactivate
      SHELL
      controller.trigger.after :up do
        controller.vm.provision "shell", run: 'always', inline: <<-SHELL
          uptime
        SHELL
      end
    end
end
